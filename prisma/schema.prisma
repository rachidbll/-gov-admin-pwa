// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  FILLER
  VIEWER
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  name              String
  role              Role      @default(FILLER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLogin         DateTime?
  isDefaultPassword Boolean   @default(true)
}

model Form {
  id              String    @id @default(uuid())
  title           String
  description     String?
  fields          Json
  settings        Json
  status          String    @default("draft")
  submissionCount Int       @default(0)
  version         Int       @default(1)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Interview {
  id           String     @id @default(uuid())
  intervieweeName String
  intervieweeId String?
  location     String?
  status       String     @default("in-progress") // "in-progress", "completed", "saved"
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  answers      Answer[]
}

model Question {
  id           String     @id @default(uuid())
  text         String
  type         String     // "multiple-choice", "checkbox", "text", "rating", "yes-no"
  options      String[]   @default([])
  required     Boolean    @default(false)
  condition    Json?      // { dependsOn: "questionId", value: "answerValue" }
  answers      Answer[]
}

model Answer {
  id           String     @id @default(uuid())
  interviewId  String
  questionId   String
  value        Json
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  interview    Interview  @relation(fields: [interviewId], references: [id])
  question     Question   @relation(fields: [questionId], references: [id])
}

model GoogleSheetConnection {
  id        String    @id @default(uuid())
  name      String
  sheetId   String
  formType  String
  lastSync  DateTime? @updatedAt
  autoSync  Boolean   @default(true)
  status    String    @default("connected")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}